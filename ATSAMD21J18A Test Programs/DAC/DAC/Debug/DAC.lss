
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000524  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000958  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  00000998  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005083  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b7  00000000  00000000  00025538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  000259ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000078  00000000  00000000  00025a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00025ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001191c  00000000  00000000  00025b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014cd  00000000  00000000  0003742b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000716ca  00000000  00000000  000388f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000268  00000000  00000000  000a9fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 1d 03 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000524 	.word	0x00000524

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000524 	.word	0x00000524
 10c:	00000524 	.word	0x00000524
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	00000524 	.word	0x00000524
 1c8:	20000000 	.word	0x20000000
 1cc:	20000434 	.word	0x20000434
 1d0:	20000004 	.word	0x20000004
 1d4:	20000434 	.word	0x20000434
 1d8:	20000474 	.word	0x20000474
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	0000035d 	.word	0x0000035d
 1f8:	0000020d 	.word	0x0000020d

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
 200:	601a      	str	r2, [r3, #0]
        return;
}
 202:	4770      	bx	lr
 204:	000f4240 	.word	0x000f4240
 208:	20000000 	.word	0x20000000

0000020c <main>:
volatile uint8_t state = 0x01;

void EIC_Handler();

int main(void)
{
 20c:	b510      	push	{r4, lr}
  SystemInit();
 20e:	4b2c      	ldr	r3, [pc, #176]	; (2c0 <main+0xb4>)
 210:	4798      	blx	r3

  //configure port, PA02
  REG_PORT_DIRSET0 = PORT_PA02;                                                                                    //set PA02 to output
 212:	2204      	movs	r2, #4
 214:	4b2b      	ldr	r3, [pc, #172]	; (2c4 <main+0xb8>)
 216:	601a      	str	r2, [r3, #0]
  REG_PORT_WRCONFIG0 = PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUX(PORT_WRCONFIG_PMUX_B) | 
 218:	4a2b      	ldr	r2, [pc, #172]	; (2c8 <main+0xbc>)
 21a:	4b2c      	ldr	r3, [pc, #176]	; (2cc <main+0xc0>)
 21c:	601a      	str	r2, [r3, #0]
                       PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PINMASK(PORT_PA02);                                    //configure port; choose port function B
  
  //set up generic clock 1 for the DAC
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(0x0001) | GCLK_GENDIV_ID(GCLK_GENDIV_ID_GCLK1);                         //set clock divider for GCLK1
 21e:	2202      	movs	r2, #2
 220:	32ff      	adds	r2, #255	; 0xff
 222:	4b2b      	ldr	r3, [pc, #172]	; (2d0 <main+0xc4>)
 224:	601a      	str	r2, [r3, #0]
  REG_GCLK_GENCTRL = GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_ID(GCLK_GENCTRL_ID_GCLK1);  //enable GCLK1 and set it's source
 226:	4a2b      	ldr	r2, [pc, #172]	; (2d4 <main+0xc8>)
 228:	4b2b      	ldr	r3, [pc, #172]	; (2d8 <main+0xcc>)
 22a:	601a      	str	r2, [r3, #0]
  while (GCLK->STATUS.bit.SYNCBUSY);  //write synchronization
 22c:	4a2b      	ldr	r2, [pc, #172]	; (2dc <main+0xd0>)
 22e:	7853      	ldrb	r3, [r2, #1]
 230:	09db      	lsrs	r3, r3, #7
 232:	d1fc      	bne.n	22e <main+0x22>
  
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_DAC;  //enable GCLK1 and assign it to DAC
 234:	4a2a      	ldr	r2, [pc, #168]	; (2e0 <main+0xd4>)
 236:	4b2b      	ldr	r3, [pc, #172]	; (2e4 <main+0xd8>)
 238:	801a      	strh	r2, [r3, #0]

  //set up DAC
  REG_PM_APBCMASK |= PM_APBCMASK_DAC;  //enable clock for DAC in PM
 23a:	4a2b      	ldr	r2, [pc, #172]	; (2e8 <main+0xdc>)
 23c:	6811      	ldr	r1, [r2, #0]
 23e:	2380      	movs	r3, #128	; 0x80
 240:	02db      	lsls	r3, r3, #11
 242:	430b      	orrs	r3, r1
 244:	6013      	str	r3, [r2, #0]
  
  REG_DAC_CTRLB |= DAC_CTRLB_REFSEL_AVCC | DAC_CTRLB_EOEN;  //set reference to analog VDD
 246:	4a29      	ldr	r2, [pc, #164]	; (2ec <main+0xe0>)
 248:	7813      	ldrb	r3, [r2, #0]
 24a:	2141      	movs	r1, #65	; 0x41
 24c:	430b      	orrs	r3, r1
 24e:	7013      	strb	r3, [r2, #0]
  REG_DAC_DATA = DAC_DATA_DATA(0);                          //set digital value which will be converted to analog
 250:	2200      	movs	r2, #0
 252:	4b27      	ldr	r3, [pc, #156]	; (2f0 <main+0xe4>)
 254:	801a      	strh	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY);
 256:	4a27      	ldr	r2, [pc, #156]	; (2f4 <main+0xe8>)
 258:	79d3      	ldrb	r3, [r2, #7]
 25a:	09db      	lsrs	r3, r3, #7
 25c:	d1fc      	bne.n	258 <main+0x4c>

  REG_DAC_CTRLA |= DAC_CTRLA_ENABLE;  //enable DAC
 25e:	4a25      	ldr	r2, [pc, #148]	; (2f4 <main+0xe8>)
 260:	7813      	ldrb	r3, [r2, #0]
 262:	2102      	movs	r1, #2
 264:	430b      	orrs	r3, r1
 266:	7013      	strb	r3, [r2, #0]
  while (DAC->STATUS.bit.SYNCBUSY);
 268:	79d3      	ldrb	r3, [r2, #7]
 26a:	09db      	lsrs	r3, r3, #7
 26c:	d1fc      	bne.n	268 <main+0x5c>

  //set up generic clock 2 for the button
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(0x0002) | GCLK_GENDIV_ID(GCLK_GENDIV_ID_GCLK2);                         //set prescaler
 26e:	4a22      	ldr	r2, [pc, #136]	; (2f8 <main+0xec>)
 270:	4b17      	ldr	r3, [pc, #92]	; (2d0 <main+0xc4>)
 272:	601a      	str	r2, [r3, #0]
  REG_GCLK_GENCTRL = GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_ID(GCLK_GENCTRL_ID_GCLK2);  //set clock source for GCLK2
 274:	4a21      	ldr	r2, [pc, #132]	; (2fc <main+0xf0>)
 276:	4b18      	ldr	r3, [pc, #96]	; (2d8 <main+0xcc>)
 278:	601a      	str	r2, [r3, #0]
  while (GCLK->STATUS.bit.SYNCBUSY);
 27a:	4a18      	ldr	r2, [pc, #96]	; (2dc <main+0xd0>)
 27c:	7853      	ldrb	r3, [r2, #1]
 27e:	09db      	lsrs	r3, r3, #7
 280:	d1fc      	bne.n	27c <main+0x70>
  
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK2 | GCLK_CLKCTRL_ID_EIC;  //enable GCLK2 and assign it to EIC
 282:	4a1f      	ldr	r2, [pc, #124]	; (300 <main+0xf4>)
 284:	4b17      	ldr	r3, [pc, #92]	; (2e4 <main+0xd8>)
 286:	801a      	strh	r2, [r3, #0]
  
  //set up PA15
  REG_PORT_WRCONFIG0 = PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_PULLEN | PORT_WRCONFIG_INEN | 
 288:	4a1e      	ldr	r2, [pc, #120]	; (304 <main+0xf8>)
 28a:	4b10      	ldr	r3, [pc, #64]	; (2cc <main+0xc0>)
 28c:	601a      	str	r2, [r3, #0]
                       PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PINMASK(PORT_PA15);              //set multiplexer option A and enable pull resistor  
  REG_PORT_OUTSET0 = PORT_PA15;                                                              //set pull resistor to pull-up                       
 28e:	2380      	movs	r3, #128	; 0x80
 290:	021b      	lsls	r3, r3, #8
 292:	4a1d      	ldr	r2, [pc, #116]	; (308 <main+0xfc>)
 294:	6013      	str	r3, [r2, #0]

  //set EIC
  REG_EIC_INTENSET = EIC_INTENSET_EXTINT15;  //enable external interrupt on PA15
 296:	4a1d      	ldr	r2, [pc, #116]	; (30c <main+0x100>)
 298:	6013      	str	r3, [r2, #0]
  REG_EIC_CONFIG1 |= EIC_CONFIG_FILTEN7 | EIC_CONFIG_SENSE7_FALL;  //enable filter and set interrupt sense to falling edge
 29a:	4a1d      	ldr	r2, [pc, #116]	; (310 <main+0x104>)
 29c:	6811      	ldr	r1, [r2, #0]
 29e:	23a0      	movs	r3, #160	; 0xa0
 2a0:	061b      	lsls	r3, r3, #24
 2a2:	430b      	orrs	r3, r1
 2a4:	6013      	str	r3, [r2, #0]
  
  REG_EIC_CTRL |= EIC_CTRL_ENABLE;  //enable EIC
 2a6:	4a1b      	ldr	r2, [pc, #108]	; (314 <main+0x108>)
 2a8:	7813      	ldrb	r3, [r2, #0]
 2aa:	2102      	movs	r1, #2
 2ac:	430b      	orrs	r3, r1
 2ae:	7013      	strb	r3, [r2, #0]
  while (EIC->STATUS.bit.SYNCBUSY);
 2b0:	7853      	ldrb	r3, [r2, #1]
 2b2:	09db      	lsrs	r3, r3, #7
 2b4:	d1fc      	bne.n	2b0 <main+0xa4>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 2b6:	2210      	movs	r2, #16
 2b8:	4b17      	ldr	r3, [pc, #92]	; (318 <main+0x10c>)
 2ba:	601a      	str	r2, [r3, #0]
 2bc:	e7fe      	b.n	2bc <main+0xb0>
 2be:	46c0      	nop			; (mov r8, r8)
 2c0:	000001fd 	.word	0x000001fd
 2c4:	41004408 	.word	0x41004408
 2c8:	51010004 	.word	0x51010004
 2cc:	41004428 	.word	0x41004428
 2d0:	40000c08 	.word	0x40000c08
 2d4:	00010601 	.word	0x00010601
 2d8:	40000c04 	.word	0x40000c04
 2dc:	40000c00 	.word	0x40000c00
 2e0:	00004121 	.word	0x00004121
 2e4:	40000c02 	.word	0x40000c02
 2e8:	40000420 	.word	0x40000420
 2ec:	42004801 	.word	0x42004801
 2f0:	42004808 	.word	0x42004808
 2f4:	42004800 	.word	0x42004800
 2f8:	00000202 	.word	0x00000202
 2fc:	00010602 	.word	0x00010602
 300:	00004205 	.word	0x00004205
 304:	40078000 	.word	0x40078000
 308:	41004418 	.word	0x41004418
 30c:	4000180c 	.word	0x4000180c
 310:	4000181c 	.word	0x4000181c
 314:	40001800 	.word	0x40001800
 318:	e000e100 	.word	0xe000e100

0000031c <EIC_Handler>:
  while (1) {}
}

void EIC_Handler()  //ISR for EIC
{
  REG_DAC_DATA = DAC_DATA_DATA((uint16_t)(state) * 256 - 1); 
 31c:	4a0c      	ldr	r2, [pc, #48]	; (350 <EIC_Handler+0x34>)
 31e:	7813      	ldrb	r3, [r2, #0]
 320:	021b      	lsls	r3, r3, #8
 322:	3b01      	subs	r3, #1
 324:	b29b      	uxth	r3, r3
 326:	490b      	ldr	r1, [pc, #44]	; (354 <EIC_Handler+0x38>)
 328:	800b      	strh	r3, [r1, #0]
  
   if (state < 3)
 32a:	7813      	ldrb	r3, [r2, #0]
 32c:	b2db      	uxtb	r3, r3
 32e:	2b02      	cmp	r3, #2
 330:	d909      	bls.n	346 <EIC_Handler+0x2a>
     state++;
   else
     state = 0;
 332:	2200      	movs	r2, #0
 334:	4b06      	ldr	r3, [pc, #24]	; (350 <EIC_Handler+0x34>)
 336:	701a      	strb	r2, [r3, #0]
  
  REG_EIC_INTFLAG |= EIC_INTFLAG_EXTINT15;  //reset flag
 338:	4a07      	ldr	r2, [pc, #28]	; (358 <EIC_Handler+0x3c>)
 33a:	6811      	ldr	r1, [r2, #0]
 33c:	2380      	movs	r3, #128	; 0x80
 33e:	021b      	lsls	r3, r3, #8
 340:	430b      	orrs	r3, r1
 342:	6013      	str	r3, [r2, #0]
 344:	4770      	bx	lr
     state++;
 346:	7813      	ldrb	r3, [r2, #0]
 348:	3301      	adds	r3, #1
 34a:	b2db      	uxtb	r3, r3
 34c:	7013      	strb	r3, [r2, #0]
 34e:	e7f3      	b.n	338 <EIC_Handler+0x1c>
 350:	20000004 	.word	0x20000004
 354:	42004808 	.word	0x42004808
 358:	40001810 	.word	0x40001810

0000035c <__libc_init_array>:
 35c:	b570      	push	{r4, r5, r6, lr}
 35e:	4e0d      	ldr	r6, [pc, #52]	; (394 <__libc_init_array+0x38>)
 360:	4d0d      	ldr	r5, [pc, #52]	; (398 <__libc_init_array+0x3c>)
 362:	2400      	movs	r4, #0
 364:	1bad      	subs	r5, r5, r6
 366:	10ad      	asrs	r5, r5, #2
 368:	d005      	beq.n	376 <__libc_init_array+0x1a>
 36a:	00a3      	lsls	r3, r4, #2
 36c:	58f3      	ldr	r3, [r6, r3]
 36e:	3401      	adds	r4, #1
 370:	4798      	blx	r3
 372:	42a5      	cmp	r5, r4
 374:	d1f9      	bne.n	36a <__libc_init_array+0xe>
 376:	f000 f8c3 	bl	500 <_init>
 37a:	4e08      	ldr	r6, [pc, #32]	; (39c <__libc_init_array+0x40>)
 37c:	4d08      	ldr	r5, [pc, #32]	; (3a0 <__libc_init_array+0x44>)
 37e:	2400      	movs	r4, #0
 380:	1bad      	subs	r5, r5, r6
 382:	10ad      	asrs	r5, r5, #2
 384:	d005      	beq.n	392 <__libc_init_array+0x36>
 386:	00a3      	lsls	r3, r4, #2
 388:	58f3      	ldr	r3, [r6, r3]
 38a:	3401      	adds	r4, #1
 38c:	4798      	blx	r3
 38e:	42a5      	cmp	r5, r4
 390:	d1f9      	bne.n	386 <__libc_init_array+0x2a>
 392:	bd70      	pop	{r4, r5, r6, pc}
 394:	0000050c 	.word	0x0000050c
 398:	0000050c 	.word	0x0000050c
 39c:	0000050c 	.word	0x0000050c
 3a0:	00000514 	.word	0x00000514

000003a4 <register_fini>:
 3a4:	4b03      	ldr	r3, [pc, #12]	; (3b4 <register_fini+0x10>)
 3a6:	b510      	push	{r4, lr}
 3a8:	2b00      	cmp	r3, #0
 3aa:	d002      	beq.n	3b2 <register_fini+0xe>
 3ac:	4802      	ldr	r0, [pc, #8]	; (3b8 <register_fini+0x14>)
 3ae:	f000 f805 	bl	3bc <atexit>
 3b2:	bd10      	pop	{r4, pc}
 3b4:	00000000 	.word	0x00000000
 3b8:	000003cd 	.word	0x000003cd

000003bc <atexit>:
 3bc:	b510      	push	{r4, lr}
 3be:	0001      	movs	r1, r0
 3c0:	2300      	movs	r3, #0
 3c2:	2200      	movs	r2, #0
 3c4:	2000      	movs	r0, #0
 3c6:	f000 f81f 	bl	408 <__register_exitproc>
 3ca:	bd10      	pop	{r4, pc}

000003cc <__libc_fini_array>:
 3cc:	b570      	push	{r4, r5, r6, lr}
 3ce:	4b09      	ldr	r3, [pc, #36]	; (3f4 <__libc_fini_array+0x28>)
 3d0:	4c09      	ldr	r4, [pc, #36]	; (3f8 <__libc_fini_array+0x2c>)
 3d2:	1ae4      	subs	r4, r4, r3
 3d4:	10a4      	asrs	r4, r4, #2
 3d6:	d009      	beq.n	3ec <__libc_fini_array+0x20>
 3d8:	4a08      	ldr	r2, [pc, #32]	; (3fc <__libc_fini_array+0x30>)
 3da:	18a5      	adds	r5, r4, r2
 3dc:	00ad      	lsls	r5, r5, #2
 3de:	18ed      	adds	r5, r5, r3
 3e0:	682b      	ldr	r3, [r5, #0]
 3e2:	3c01      	subs	r4, #1
 3e4:	4798      	blx	r3
 3e6:	3d04      	subs	r5, #4
 3e8:	2c00      	cmp	r4, #0
 3ea:	d1f9      	bne.n	3e0 <__libc_fini_array+0x14>
 3ec:	f000 f892 	bl	514 <_fini>
 3f0:	bd70      	pop	{r4, r5, r6, pc}
 3f2:	46c0      	nop			; (mov r8, r8)
 3f4:	00000520 	.word	0x00000520
 3f8:	00000524 	.word	0x00000524
 3fc:	3fffffff 	.word	0x3fffffff

00000400 <__retarget_lock_acquire_recursive>:
 400:	4770      	bx	lr
 402:	46c0      	nop			; (mov r8, r8)

00000404 <__retarget_lock_release_recursive>:
 404:	4770      	bx	lr
 406:	46c0      	nop			; (mov r8, r8)

00000408 <__register_exitproc>:
 408:	b5f0      	push	{r4, r5, r6, r7, lr}
 40a:	464e      	mov	r6, r9
 40c:	4645      	mov	r5, r8
 40e:	46de      	mov	lr, fp
 410:	4657      	mov	r7, sl
 412:	b5e0      	push	{r5, r6, r7, lr}
 414:	4d36      	ldr	r5, [pc, #216]	; (4f0 <__register_exitproc+0xe8>)
 416:	b083      	sub	sp, #12
 418:	0006      	movs	r6, r0
 41a:	6828      	ldr	r0, [r5, #0]
 41c:	4698      	mov	r8, r3
 41e:	000f      	movs	r7, r1
 420:	4691      	mov	r9, r2
 422:	f7ff ffed 	bl	400 <__retarget_lock_acquire_recursive>
 426:	4b33      	ldr	r3, [pc, #204]	; (4f4 <__register_exitproc+0xec>)
 428:	681c      	ldr	r4, [r3, #0]
 42a:	23a4      	movs	r3, #164	; 0xa4
 42c:	005b      	lsls	r3, r3, #1
 42e:	58e0      	ldr	r0, [r4, r3]
 430:	2800      	cmp	r0, #0
 432:	d052      	beq.n	4da <__register_exitproc+0xd2>
 434:	6843      	ldr	r3, [r0, #4]
 436:	2b1f      	cmp	r3, #31
 438:	dc13      	bgt.n	462 <__register_exitproc+0x5a>
 43a:	1c5a      	adds	r2, r3, #1
 43c:	9201      	str	r2, [sp, #4]
 43e:	2e00      	cmp	r6, #0
 440:	d128      	bne.n	494 <__register_exitproc+0x8c>
 442:	9a01      	ldr	r2, [sp, #4]
 444:	3302      	adds	r3, #2
 446:	009b      	lsls	r3, r3, #2
 448:	6042      	str	r2, [r0, #4]
 44a:	501f      	str	r7, [r3, r0]
 44c:	6828      	ldr	r0, [r5, #0]
 44e:	f7ff ffd9 	bl	404 <__retarget_lock_release_recursive>
 452:	2000      	movs	r0, #0
 454:	b003      	add	sp, #12
 456:	bc3c      	pop	{r2, r3, r4, r5}
 458:	4690      	mov	r8, r2
 45a:	4699      	mov	r9, r3
 45c:	46a2      	mov	sl, r4
 45e:	46ab      	mov	fp, r5
 460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 462:	4b25      	ldr	r3, [pc, #148]	; (4f8 <__register_exitproc+0xf0>)
 464:	2b00      	cmp	r3, #0
 466:	d03d      	beq.n	4e4 <__register_exitproc+0xdc>
 468:	20c8      	movs	r0, #200	; 0xc8
 46a:	0040      	lsls	r0, r0, #1
 46c:	e000      	b.n	470 <__register_exitproc+0x68>
 46e:	bf00      	nop
 470:	2800      	cmp	r0, #0
 472:	d037      	beq.n	4e4 <__register_exitproc+0xdc>
 474:	22a4      	movs	r2, #164	; 0xa4
 476:	2300      	movs	r3, #0
 478:	0052      	lsls	r2, r2, #1
 47a:	58a1      	ldr	r1, [r4, r2]
 47c:	6043      	str	r3, [r0, #4]
 47e:	6001      	str	r1, [r0, #0]
 480:	50a0      	str	r0, [r4, r2]
 482:	3240      	adds	r2, #64	; 0x40
 484:	5083      	str	r3, [r0, r2]
 486:	3204      	adds	r2, #4
 488:	5083      	str	r3, [r0, r2]
 48a:	3301      	adds	r3, #1
 48c:	9301      	str	r3, [sp, #4]
 48e:	2300      	movs	r3, #0
 490:	2e00      	cmp	r6, #0
 492:	d0d6      	beq.n	442 <__register_exitproc+0x3a>
 494:	009a      	lsls	r2, r3, #2
 496:	4692      	mov	sl, r2
 498:	4482      	add	sl, r0
 49a:	464a      	mov	r2, r9
 49c:	2188      	movs	r1, #136	; 0x88
 49e:	4654      	mov	r4, sl
 4a0:	5062      	str	r2, [r4, r1]
 4a2:	22c4      	movs	r2, #196	; 0xc4
 4a4:	0052      	lsls	r2, r2, #1
 4a6:	4691      	mov	r9, r2
 4a8:	4481      	add	r9, r0
 4aa:	464a      	mov	r2, r9
 4ac:	3987      	subs	r1, #135	; 0x87
 4ae:	4099      	lsls	r1, r3
 4b0:	6812      	ldr	r2, [r2, #0]
 4b2:	468b      	mov	fp, r1
 4b4:	430a      	orrs	r2, r1
 4b6:	4694      	mov	ip, r2
 4b8:	464a      	mov	r2, r9
 4ba:	4661      	mov	r1, ip
 4bc:	6011      	str	r1, [r2, #0]
 4be:	2284      	movs	r2, #132	; 0x84
 4c0:	4641      	mov	r1, r8
 4c2:	0052      	lsls	r2, r2, #1
 4c4:	50a1      	str	r1, [r4, r2]
 4c6:	2e02      	cmp	r6, #2
 4c8:	d1bb      	bne.n	442 <__register_exitproc+0x3a>
 4ca:	0002      	movs	r2, r0
 4cc:	465c      	mov	r4, fp
 4ce:	328d      	adds	r2, #141	; 0x8d
 4d0:	32ff      	adds	r2, #255	; 0xff
 4d2:	6811      	ldr	r1, [r2, #0]
 4d4:	430c      	orrs	r4, r1
 4d6:	6014      	str	r4, [r2, #0]
 4d8:	e7b3      	b.n	442 <__register_exitproc+0x3a>
 4da:	0020      	movs	r0, r4
 4dc:	304d      	adds	r0, #77	; 0x4d
 4de:	30ff      	adds	r0, #255	; 0xff
 4e0:	50e0      	str	r0, [r4, r3]
 4e2:	e7a7      	b.n	434 <__register_exitproc+0x2c>
 4e4:	6828      	ldr	r0, [r5, #0]
 4e6:	f7ff ff8d 	bl	404 <__retarget_lock_release_recursive>
 4ea:	2001      	movs	r0, #1
 4ec:	4240      	negs	r0, r0
 4ee:	e7b1      	b.n	454 <__register_exitproc+0x4c>
 4f0:	20000430 	.word	0x20000430
 4f4:	000004fc 	.word	0x000004fc
 4f8:	00000000 	.word	0x00000000

000004fc <_global_impure_ptr>:
 4fc:	20000008                                ... 

00000500 <_init>:
 500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 502:	46c0      	nop			; (mov r8, r8)
 504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 506:	bc08      	pop	{r3}
 508:	469e      	mov	lr, r3
 50a:	4770      	bx	lr

0000050c <__init_array_start>:
 50c:	000003a5 	.word	0x000003a5

00000510 <__frame_dummy_init_array_entry>:
 510:	000000dd                                ....

00000514 <_fini>:
 514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 516:	46c0      	nop			; (mov r8, r8)
 518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 51a:	bc08      	pop	{r3}
 51c:	469e      	mov	lr, r3
 51e:	4770      	bx	lr

00000520 <__fini_array_start>:
 520:	000000b5 	.word	0x000000b5
