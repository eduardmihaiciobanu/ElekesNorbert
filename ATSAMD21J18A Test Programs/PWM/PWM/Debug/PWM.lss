
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00000540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000974  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  000009b4  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006831  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c4  00000000  00000000  00026ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  000271aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000078  00000000  00000000  0002720a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00027282  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011922  00000000  00000000  000272ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000014dc  00000000  00000000  00038bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071bba  00000000  00000000  0003a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000268  00000000  00000000  000abc84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 2d 03 00 00 15 01 00 00 15 01 00 00     ....-...........
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	00000540 	.word	0x00000540

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	00000540 	.word	0x00000540
 10c:	00000540 	.word	0x00000540
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	00000540 	.word	0x00000540
 1c8:	20000000 	.word	0x20000000
 1cc:	20000434 	.word	0x20000434
 1d0:	20000004 	.word	0x20000004
 1d4:	20000434 	.word	0x20000434
 1d8:	20000474 	.word	0x20000474
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	00000379 	.word	0x00000379
 1f8:	0000020d 	.word	0x0000020d

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
 200:	601a      	str	r2, [r3, #0]
        return;
}
 202:	4770      	bx	lr
 204:	000f4240 	.word	0x000f4240
 208:	20000000 	.word	0x20000000

0000020c <main>:
void EIC_Handler();

volatile uint8_t state = 0x01;

int main(void)
{
 20c:	b510      	push	{r4, lr}
  /* Initialize the SAM system */
  SystemInit();
 20e:	4b2e      	ldr	r3, [pc, #184]	; (2c8 <main+0xbc>)
 210:	4798      	blx	r3
  
  //set up PB30
  REG_PORT_DIRSET1 = PORT_PB30;  //set port direction to output
 212:	2280      	movs	r2, #128	; 0x80
 214:	05d2      	lsls	r2, r2, #23
 216:	4b2d      	ldr	r3, [pc, #180]	; (2cc <main+0xc0>)
 218:	601a      	str	r2, [r3, #0]
  REG_PORT_WRCONFIG1 = PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_WRPMUX |
 21a:	4a2d      	ldr	r2, [pc, #180]	; (2d0 <main+0xc4>)
 21c:	4b2d      	ldr	r3, [pc, #180]	; (2d4 <main+0xc8>)
 21e:	601a      	str	r2, [r3, #0]
                       PORT_WRCONFIG_PMUX(PORT_WRCONFIG_PMUX_E) | PORT_WRCONFIG_PMUXEN |
                       PORT_WRCONFIG_PINMASK(PORT_WRCONFIG_PINMASK_PB30);  //write config     

  //set generic clock for TCC0
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(0x0001) | GCLK_GENDIV_ID(GCLK_GENDIV_ID_GCLKGEN1);         //set prescaler
 220:	2202      	movs	r2, #2
 222:	32ff      	adds	r2, #255	; 0xff
 224:	4b2c      	ldr	r3, [pc, #176]	; (2d8 <main+0xcc>)
 226:	601a      	str	r2, [r3, #0]
  REG_GCLK_GENCTRL = GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC8M |
 228:	4a2c      	ldr	r2, [pc, #176]	; (2dc <main+0xd0>)
 22a:	4b2d      	ldr	r3, [pc, #180]	; (2e0 <main+0xd4>)
 22c:	601a      	str	r2, [r3, #0]
                     GCLK_GENCTRL_ID(GCLK_GENCTRL_ID_GCLKGEN1);                                //enable generic clock generator 1
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1 | GCLK_CLKCTRL_ID_TCC0_TCC1;  //configure generic clock 
 22e:	4a2d      	ldr	r2, [pc, #180]	; (2e4 <main+0xd8>)
 230:	4b2d      	ldr	r3, [pc, #180]	; (2e8 <main+0xdc>)
 232:	801a      	strh	r2, [r3, #0]
  
  //set up timer TCC0 (PWM generation)
  REG_PM_APBCMASK |= PM_APBCMASK_TCC0;     //enable the TCC0 bus clock (CLK_TCx_APB)
 234:	4a2d      	ldr	r2, [pc, #180]	; (2ec <main+0xe0>)
 236:	6811      	ldr	r1, [r2, #0]
 238:	2380      	movs	r3, #128	; 0x80
 23a:	005b      	lsls	r3, r3, #1
 23c:	430b      	orrs	r3, r1
 23e:	6013      	str	r3, [r2, #0]
  
  REG_TCC0_WAVE |= TCC_WAVE_WAVEGEN_NPWM;  //set waveform generation mode
 240:	4a2b      	ldr	r2, [pc, #172]	; (2f0 <main+0xe4>)
 242:	6813      	ldr	r3, [r2, #0]
 244:	2102      	movs	r1, #2
 246:	430b      	orrs	r3, r1
 248:	6013      	str	r3, [r2, #0]
  while (TCC0->SYNCBUSY.bit.WAVE); 
 24a:	4b2a      	ldr	r3, [pc, #168]	; (2f4 <main+0xe8>)
 24c:	689a      	ldr	r2, [r3, #8]
 24e:	0652      	lsls	r2, r2, #25
 250:	d4fc      	bmi.n	24c <main+0x40>
  REG_TCC0_PER = TCC_PER_PER(6000);        //set period
 252:	4a29      	ldr	r2, [pc, #164]	; (2f8 <main+0xec>)
 254:	4b29      	ldr	r3, [pc, #164]	; (2fc <main+0xf0>)
 256:	601a      	str	r2, [r3, #0]
  while (TCC0->SYNCBUSY.bit.PER);
 258:	4b26      	ldr	r3, [pc, #152]	; (2f4 <main+0xe8>)
 25a:	689a      	ldr	r2, [r3, #8]
 25c:	0612      	lsls	r2, r2, #24
 25e:	d4fc      	bmi.n	25a <main+0x4e>
  REG_TCC0_CC0 = TCC_CC_CC(0);          //set comparator value
 260:	2200      	movs	r2, #0
 262:	4b27      	ldr	r3, [pc, #156]	; (300 <main+0xf4>)
 264:	601a      	str	r2, [r3, #0]
  while (TCC0->SYNCBUSY.bit.CC0);
 266:	4b23      	ldr	r3, [pc, #140]	; (2f4 <main+0xe8>)
 268:	689a      	ldr	r2, [r3, #8]
 26a:	05d2      	lsls	r2, r2, #23
 26c:	d4fc      	bmi.n	268 <main+0x5c>
  REG_TCC0_CTRLA |= TCC_CTRLA_ENABLE;      //enable timer (PWM)
 26e:	4a21      	ldr	r2, [pc, #132]	; (2f4 <main+0xe8>)
 270:	6813      	ldr	r3, [r2, #0]
 272:	2102      	movs	r1, #2
 274:	430b      	orrs	r3, r1
 276:	6013      	str	r3, [r2, #0]
  while (TCC0->SYNCBUSY.bit.ENABLE);
 278:	0013      	movs	r3, r2
 27a:	689a      	ldr	r2, [r3, #8]
 27c:	0792      	lsls	r2, r2, #30
 27e:	d4fc      	bmi.n	27a <main+0x6e>
  
  //set up button
  REG_PORT_WRCONFIG0 = PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_PULLEN | PORT_WRCONFIG_PMUXEN |
 280:	4a20      	ldr	r2, [pc, #128]	; (304 <main+0xf8>)
 282:	4b21      	ldr	r3, [pc, #132]	; (308 <main+0xfc>)
 284:	601a      	str	r2, [r3, #0]
                       PORT_WRCONFIG_INEN | PORT_WRCONFIG_PINMASK(PORT_PA15);  //write configuration reg for port PA15 (enable input and pull resistor)
  REG_PORT_OUTSET0 = PORT_PA15;  //set pull resistor to pull-up
 286:	2280      	movs	r2, #128	; 0x80
 288:	0212      	lsls	r2, r2, #8
 28a:	4b20      	ldr	r3, [pc, #128]	; (30c <main+0x100>)
 28c:	601a      	str	r2, [r3, #0]
  
  //set up generic clock 2 for the external interrupt controller (EIC)
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(0x0002) | GCLK_GENDIV_ID(GCLK_GENDIV_ID_GCLKGEN2);                         //set frequency divider
 28e:	4920      	ldr	r1, [pc, #128]	; (310 <main+0x104>)
 290:	4b11      	ldr	r3, [pc, #68]	; (2d8 <main+0xcc>)
 292:	6019      	str	r1, [r3, #0]
  REG_GCLK_GENCTRL = GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_ID(GCLK_GENCTRL_ID_GCLKGEN2);  //enable generic clock 2 and set its source to the 8MHz internal oscillator
 294:	491f      	ldr	r1, [pc, #124]	; (314 <main+0x108>)
 296:	4b12      	ldr	r3, [pc, #72]	; (2e0 <main+0xd4>)
 298:	6019      	str	r1, [r3, #0]
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK2 | GCLK_CLKCTRL_ID_EIC;                        //assign generic clock 2 to EIC
 29a:	491f      	ldr	r1, [pc, #124]	; (318 <main+0x10c>)
 29c:	4b12      	ldr	r3, [pc, #72]	; (2e8 <main+0xdc>)
 29e:	8019      	strh	r1, [r3, #0]
  
  //set up EIC
  REG_EIC_CONFIG1 |= EIC_CONFIG_FILTEN7 | EIC_CONFIG_SENSE7_FALL;  //set interrupt to the falling edge (1 = second part(8 sense/part): 8 + 7 = 15)
 2a0:	491e      	ldr	r1, [pc, #120]	; (31c <main+0x110>)
 2a2:	6808      	ldr	r0, [r1, #0]
 2a4:	23a0      	movs	r3, #160	; 0xa0
 2a6:	061b      	lsls	r3, r3, #24
 2a8:	4303      	orrs	r3, r0
 2aa:	600b      	str	r3, [r1, #0]
  REG_EIC_INTENSET = EIC_INTENSET_EXTINT15;                        //enable interrupt for PA15
 2ac:	4b1c      	ldr	r3, [pc, #112]	; (320 <main+0x114>)
 2ae:	601a      	str	r2, [r3, #0]
 
  REG_EIC_CTRL = EIC_CTRL_ENABLE;   //enable the external interrupt controller
 2b0:	2202      	movs	r2, #2
 2b2:	4b1c      	ldr	r3, [pc, #112]	; (324 <main+0x118>)
 2b4:	701a      	strb	r2, [r3, #0]
  while(EIC->STATUS.bit.SYNCBUSY);  //wait until the external interrupt controller is activated
 2b6:	001a      	movs	r2, r3
 2b8:	7853      	ldrb	r3, [r2, #1]
 2ba:	09db      	lsrs	r3, r3, #7
 2bc:	d1fc      	bne.n	2b8 <main+0xac>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 2be:	2210      	movs	r2, #16
 2c0:	4b19      	ldr	r3, [pc, #100]	; (328 <main+0x11c>)
 2c2:	601a      	str	r2, [r3, #0]
 2c4:	e7fe      	b.n	2c4 <main+0xb8>
 2c6:	46c0      	nop			; (mov r8, r8)
 2c8:	000001fd 	.word	0x000001fd
 2cc:	41004488 	.word	0x41004488
 2d0:	d4014000 	.word	0xd4014000
 2d4:	410044a8 	.word	0x410044a8
 2d8:	40000c08 	.word	0x40000c08
 2dc:	00010601 	.word	0x00010601
 2e0:	40000c04 	.word	0x40000c04
 2e4:	0000411a 	.word	0x0000411a
 2e8:	40000c02 	.word	0x40000c02
 2ec:	40000420 	.word	0x40000420
 2f0:	4200203c 	.word	0x4200203c
 2f4:	42002000 	.word	0x42002000
 2f8:	00001770 	.word	0x00001770
 2fc:	42002040 	.word	0x42002040
 300:	42002044 	.word	0x42002044
 304:	40078000 	.word	0x40078000
 308:	41004428 	.word	0x41004428
 30c:	41004418 	.word	0x41004418
 310:	00000202 	.word	0x00000202
 314:	00010602 	.word	0x00010602
 318:	00004205 	.word	0x00004205
 31c:	4000181c 	.word	0x4000181c
 320:	4000180c 	.word	0x4000180c
 324:	40001800 	.word	0x40001800
 328:	e000e100 	.word	0xe000e100

0000032c <EIC_Handler>:
  while (1) {}
}

void EIC_Handler()  //interrupt service routine for the external interrupt controller
{
  REG_TCC0_CC0 = TCC_CC_CC((uint16_t)(state) * 2000);
 32c:	4b0e      	ldr	r3, [pc, #56]	; (368 <EIC_Handler+0x3c>)
 32e:	781b      	ldrb	r3, [r3, #0]
 330:	22fa      	movs	r2, #250	; 0xfa
 332:	00d2      	lsls	r2, r2, #3
 334:	4353      	muls	r3, r2
 336:	4a0d      	ldr	r2, [pc, #52]	; (36c <EIC_Handler+0x40>)
 338:	6013      	str	r3, [r2, #0]
  while (TCC0->SYNCBUSY.bit.CC0);
 33a:	4a0d      	ldr	r2, [pc, #52]	; (370 <EIC_Handler+0x44>)
 33c:	6893      	ldr	r3, [r2, #8]
 33e:	05db      	lsls	r3, r3, #23
 340:	d4fc      	bmi.n	33c <EIC_Handler+0x10>
  
  if (state < 3)
 342:	4b09      	ldr	r3, [pc, #36]	; (368 <EIC_Handler+0x3c>)
 344:	781b      	ldrb	r3, [r3, #0]
 346:	b2db      	uxtb	r3, r3
 348:	2b02      	cmp	r3, #2
 34a:	d907      	bls.n	35c <EIC_Handler+0x30>
    state++;
  else
    state = 0x00;
 34c:	2200      	movs	r2, #0
 34e:	4b06      	ldr	r3, [pc, #24]	; (368 <EIC_Handler+0x3c>)
 350:	701a      	strb	r2, [r3, #0]
    
  REG_EIC_INTFLAG = EIC_INTFLAG_EXTINT15;  //reset flag 
 352:	2280      	movs	r2, #128	; 0x80
 354:	0212      	lsls	r2, r2, #8
 356:	4b07      	ldr	r3, [pc, #28]	; (374 <EIC_Handler+0x48>)
 358:	601a      	str	r2, [r3, #0]
 35a:	4770      	bx	lr
    state++;
 35c:	4a02      	ldr	r2, [pc, #8]	; (368 <EIC_Handler+0x3c>)
 35e:	7813      	ldrb	r3, [r2, #0]
 360:	3301      	adds	r3, #1
 362:	b2db      	uxtb	r3, r3
 364:	7013      	strb	r3, [r2, #0]
 366:	e7f4      	b.n	352 <EIC_Handler+0x26>
 368:	20000004 	.word	0x20000004
 36c:	42002044 	.word	0x42002044
 370:	42002000 	.word	0x42002000
 374:	40001810 	.word	0x40001810

00000378 <__libc_init_array>:
 378:	b570      	push	{r4, r5, r6, lr}
 37a:	4e0d      	ldr	r6, [pc, #52]	; (3b0 <__libc_init_array+0x38>)
 37c:	4d0d      	ldr	r5, [pc, #52]	; (3b4 <__libc_init_array+0x3c>)
 37e:	2400      	movs	r4, #0
 380:	1bad      	subs	r5, r5, r6
 382:	10ad      	asrs	r5, r5, #2
 384:	d005      	beq.n	392 <__libc_init_array+0x1a>
 386:	00a3      	lsls	r3, r4, #2
 388:	58f3      	ldr	r3, [r6, r3]
 38a:	3401      	adds	r4, #1
 38c:	4798      	blx	r3
 38e:	42a5      	cmp	r5, r4
 390:	d1f9      	bne.n	386 <__libc_init_array+0xe>
 392:	f000 f8c3 	bl	51c <_init>
 396:	4e08      	ldr	r6, [pc, #32]	; (3b8 <__libc_init_array+0x40>)
 398:	4d08      	ldr	r5, [pc, #32]	; (3bc <__libc_init_array+0x44>)
 39a:	2400      	movs	r4, #0
 39c:	1bad      	subs	r5, r5, r6
 39e:	10ad      	asrs	r5, r5, #2
 3a0:	d005      	beq.n	3ae <__libc_init_array+0x36>
 3a2:	00a3      	lsls	r3, r4, #2
 3a4:	58f3      	ldr	r3, [r6, r3]
 3a6:	3401      	adds	r4, #1
 3a8:	4798      	blx	r3
 3aa:	42a5      	cmp	r5, r4
 3ac:	d1f9      	bne.n	3a2 <__libc_init_array+0x2a>
 3ae:	bd70      	pop	{r4, r5, r6, pc}
 3b0:	00000528 	.word	0x00000528
 3b4:	00000528 	.word	0x00000528
 3b8:	00000528 	.word	0x00000528
 3bc:	00000530 	.word	0x00000530

000003c0 <register_fini>:
 3c0:	4b03      	ldr	r3, [pc, #12]	; (3d0 <register_fini+0x10>)
 3c2:	b510      	push	{r4, lr}
 3c4:	2b00      	cmp	r3, #0
 3c6:	d002      	beq.n	3ce <register_fini+0xe>
 3c8:	4802      	ldr	r0, [pc, #8]	; (3d4 <register_fini+0x14>)
 3ca:	f000 f805 	bl	3d8 <atexit>
 3ce:	bd10      	pop	{r4, pc}
 3d0:	00000000 	.word	0x00000000
 3d4:	000003e9 	.word	0x000003e9

000003d8 <atexit>:
 3d8:	b510      	push	{r4, lr}
 3da:	0001      	movs	r1, r0
 3dc:	2300      	movs	r3, #0
 3de:	2200      	movs	r2, #0
 3e0:	2000      	movs	r0, #0
 3e2:	f000 f81f 	bl	424 <__register_exitproc>
 3e6:	bd10      	pop	{r4, pc}

000003e8 <__libc_fini_array>:
 3e8:	b570      	push	{r4, r5, r6, lr}
 3ea:	4b09      	ldr	r3, [pc, #36]	; (410 <__libc_fini_array+0x28>)
 3ec:	4c09      	ldr	r4, [pc, #36]	; (414 <__libc_fini_array+0x2c>)
 3ee:	1ae4      	subs	r4, r4, r3
 3f0:	10a4      	asrs	r4, r4, #2
 3f2:	d009      	beq.n	408 <__libc_fini_array+0x20>
 3f4:	4a08      	ldr	r2, [pc, #32]	; (418 <__libc_fini_array+0x30>)
 3f6:	18a5      	adds	r5, r4, r2
 3f8:	00ad      	lsls	r5, r5, #2
 3fa:	18ed      	adds	r5, r5, r3
 3fc:	682b      	ldr	r3, [r5, #0]
 3fe:	3c01      	subs	r4, #1
 400:	4798      	blx	r3
 402:	3d04      	subs	r5, #4
 404:	2c00      	cmp	r4, #0
 406:	d1f9      	bne.n	3fc <__libc_fini_array+0x14>
 408:	f000 f892 	bl	530 <_fini>
 40c:	bd70      	pop	{r4, r5, r6, pc}
 40e:	46c0      	nop			; (mov r8, r8)
 410:	0000053c 	.word	0x0000053c
 414:	00000540 	.word	0x00000540
 418:	3fffffff 	.word	0x3fffffff

0000041c <__retarget_lock_acquire_recursive>:
 41c:	4770      	bx	lr
 41e:	46c0      	nop			; (mov r8, r8)

00000420 <__retarget_lock_release_recursive>:
 420:	4770      	bx	lr
 422:	46c0      	nop			; (mov r8, r8)

00000424 <__register_exitproc>:
 424:	b5f0      	push	{r4, r5, r6, r7, lr}
 426:	464e      	mov	r6, r9
 428:	4645      	mov	r5, r8
 42a:	46de      	mov	lr, fp
 42c:	4657      	mov	r7, sl
 42e:	b5e0      	push	{r5, r6, r7, lr}
 430:	4d36      	ldr	r5, [pc, #216]	; (50c <__register_exitproc+0xe8>)
 432:	b083      	sub	sp, #12
 434:	0006      	movs	r6, r0
 436:	6828      	ldr	r0, [r5, #0]
 438:	4698      	mov	r8, r3
 43a:	000f      	movs	r7, r1
 43c:	4691      	mov	r9, r2
 43e:	f7ff ffed 	bl	41c <__retarget_lock_acquire_recursive>
 442:	4b33      	ldr	r3, [pc, #204]	; (510 <__register_exitproc+0xec>)
 444:	681c      	ldr	r4, [r3, #0]
 446:	23a4      	movs	r3, #164	; 0xa4
 448:	005b      	lsls	r3, r3, #1
 44a:	58e0      	ldr	r0, [r4, r3]
 44c:	2800      	cmp	r0, #0
 44e:	d052      	beq.n	4f6 <__register_exitproc+0xd2>
 450:	6843      	ldr	r3, [r0, #4]
 452:	2b1f      	cmp	r3, #31
 454:	dc13      	bgt.n	47e <__register_exitproc+0x5a>
 456:	1c5a      	adds	r2, r3, #1
 458:	9201      	str	r2, [sp, #4]
 45a:	2e00      	cmp	r6, #0
 45c:	d128      	bne.n	4b0 <__register_exitproc+0x8c>
 45e:	9a01      	ldr	r2, [sp, #4]
 460:	3302      	adds	r3, #2
 462:	009b      	lsls	r3, r3, #2
 464:	6042      	str	r2, [r0, #4]
 466:	501f      	str	r7, [r3, r0]
 468:	6828      	ldr	r0, [r5, #0]
 46a:	f7ff ffd9 	bl	420 <__retarget_lock_release_recursive>
 46e:	2000      	movs	r0, #0
 470:	b003      	add	sp, #12
 472:	bc3c      	pop	{r2, r3, r4, r5}
 474:	4690      	mov	r8, r2
 476:	4699      	mov	r9, r3
 478:	46a2      	mov	sl, r4
 47a:	46ab      	mov	fp, r5
 47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 47e:	4b25      	ldr	r3, [pc, #148]	; (514 <__register_exitproc+0xf0>)
 480:	2b00      	cmp	r3, #0
 482:	d03d      	beq.n	500 <__register_exitproc+0xdc>
 484:	20c8      	movs	r0, #200	; 0xc8
 486:	0040      	lsls	r0, r0, #1
 488:	e000      	b.n	48c <__register_exitproc+0x68>
 48a:	bf00      	nop
 48c:	2800      	cmp	r0, #0
 48e:	d037      	beq.n	500 <__register_exitproc+0xdc>
 490:	22a4      	movs	r2, #164	; 0xa4
 492:	2300      	movs	r3, #0
 494:	0052      	lsls	r2, r2, #1
 496:	58a1      	ldr	r1, [r4, r2]
 498:	6043      	str	r3, [r0, #4]
 49a:	6001      	str	r1, [r0, #0]
 49c:	50a0      	str	r0, [r4, r2]
 49e:	3240      	adds	r2, #64	; 0x40
 4a0:	5083      	str	r3, [r0, r2]
 4a2:	3204      	adds	r2, #4
 4a4:	5083      	str	r3, [r0, r2]
 4a6:	3301      	adds	r3, #1
 4a8:	9301      	str	r3, [sp, #4]
 4aa:	2300      	movs	r3, #0
 4ac:	2e00      	cmp	r6, #0
 4ae:	d0d6      	beq.n	45e <__register_exitproc+0x3a>
 4b0:	009a      	lsls	r2, r3, #2
 4b2:	4692      	mov	sl, r2
 4b4:	4482      	add	sl, r0
 4b6:	464a      	mov	r2, r9
 4b8:	2188      	movs	r1, #136	; 0x88
 4ba:	4654      	mov	r4, sl
 4bc:	5062      	str	r2, [r4, r1]
 4be:	22c4      	movs	r2, #196	; 0xc4
 4c0:	0052      	lsls	r2, r2, #1
 4c2:	4691      	mov	r9, r2
 4c4:	4481      	add	r9, r0
 4c6:	464a      	mov	r2, r9
 4c8:	3987      	subs	r1, #135	; 0x87
 4ca:	4099      	lsls	r1, r3
 4cc:	6812      	ldr	r2, [r2, #0]
 4ce:	468b      	mov	fp, r1
 4d0:	430a      	orrs	r2, r1
 4d2:	4694      	mov	ip, r2
 4d4:	464a      	mov	r2, r9
 4d6:	4661      	mov	r1, ip
 4d8:	6011      	str	r1, [r2, #0]
 4da:	2284      	movs	r2, #132	; 0x84
 4dc:	4641      	mov	r1, r8
 4de:	0052      	lsls	r2, r2, #1
 4e0:	50a1      	str	r1, [r4, r2]
 4e2:	2e02      	cmp	r6, #2
 4e4:	d1bb      	bne.n	45e <__register_exitproc+0x3a>
 4e6:	0002      	movs	r2, r0
 4e8:	465c      	mov	r4, fp
 4ea:	328d      	adds	r2, #141	; 0x8d
 4ec:	32ff      	adds	r2, #255	; 0xff
 4ee:	6811      	ldr	r1, [r2, #0]
 4f0:	430c      	orrs	r4, r1
 4f2:	6014      	str	r4, [r2, #0]
 4f4:	e7b3      	b.n	45e <__register_exitproc+0x3a>
 4f6:	0020      	movs	r0, r4
 4f8:	304d      	adds	r0, #77	; 0x4d
 4fa:	30ff      	adds	r0, #255	; 0xff
 4fc:	50e0      	str	r0, [r4, r3]
 4fe:	e7a7      	b.n	450 <__register_exitproc+0x2c>
 500:	6828      	ldr	r0, [r5, #0]
 502:	f7ff ff8d 	bl	420 <__retarget_lock_release_recursive>
 506:	2001      	movs	r0, #1
 508:	4240      	negs	r0, r0
 50a:	e7b1      	b.n	470 <__register_exitproc+0x4c>
 50c:	20000430 	.word	0x20000430
 510:	00000518 	.word	0x00000518
 514:	00000000 	.word	0x00000000

00000518 <_global_impure_ptr>:
 518:	20000008                                ... 

0000051c <_init>:
 51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 51e:	46c0      	nop			; (mov r8, r8)
 520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 522:	bc08      	pop	{r3}
 524:	469e      	mov	lr, r3
 526:	4770      	bx	lr

00000528 <__init_array_start>:
 528:	000003c1 	.word	0x000003c1

0000052c <__frame_dummy_init_array_entry>:
 52c:	000000dd                                ....

00000530 <_fini>:
 530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 532:	46c0      	nop			; (mov r8, r8)
 534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 536:	bc08      	pop	{r3}
 538:	469e      	mov	lr, r3
 53a:	4770      	bx	lr

0000053c <__fini_array_start>:
 53c:	000000b5 	.word	0x000000b5
