
TurnOnLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000003fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  00000830  00020434  2**2
                  ALLOC
  3 .stack        00002004  20000474  00000870  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003be0  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000333  00000000  00000000  00024095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  000243c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  00024428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00024498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000118fe  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001481  00000000  00000000  00035dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00070fc7  00000000  00000000  00037257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000258  00000000  00000000  000a8220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     x$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	000003fc 	.word	0x000003fc

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	000003fc 	.word	0x000003fc
 10c:	000003fc 	.word	0x000003fc
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
 11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
 11e:	429a      	cmp	r2, r3
 120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 122:	001a      	movs	r2, r3
 124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
 126:	429a      	cmp	r2, r3
 128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
 12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
 12c:	3303      	adds	r3, #3
 12e:	1a9b      	subs	r3, r3, r2
 130:	089b      	lsrs	r3, r3, #2
 132:	3301      	adds	r3, #1
 134:	009b      	lsls	r3, r3, #2
 136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
 13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
 13c:	588c      	ldr	r4, [r1, r2]
 13e:	5084      	str	r4, [r0, r2]
 140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 142:	429a      	cmp	r2, r3
 144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
 14a:	429a      	cmp	r2, r3
 14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
 14e:	43d3      	mvns	r3, r2
 150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
 152:	185b      	adds	r3, r3, r1
 154:	2103      	movs	r1, #3
 156:	438b      	bics	r3, r1
 158:	3304      	adds	r3, #4
 15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 15c:	2100      	movs	r1, #0
 15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 160:	4293      	cmp	r3, r2
 162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
 166:	21ff      	movs	r1, #255	; 0xff
 168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
 16a:	438b      	bics	r3, r1
 16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16e:	39fd      	subs	r1, #253	; 0xfd
 170:	2390      	movs	r3, #144	; 0x90
 172:	005b      	lsls	r3, r3, #1
 174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
 176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
 17a:	78d3      	ldrb	r3, [r2, #3]
 17c:	2503      	movs	r5, #3
 17e:	43ab      	bics	r3, r5
 180:	2402      	movs	r4, #2
 182:	4323      	orrs	r3, r4
 184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	270c      	movs	r7, #12
 18a:	43bb      	bics	r3, r7
 18c:	2608      	movs	r6, #8
 18e:	4333      	orrs	r3, r6
 190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
 194:	7b98      	ldrb	r0, [r3, #14]
 196:	2230      	movs	r2, #48	; 0x30
 198:	4390      	bics	r0, r2
 19a:	2220      	movs	r2, #32
 19c:	4310      	orrs	r0, r2
 19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a0:	7b99      	ldrb	r1, [r3, #14]
 1a2:	43b9      	bics	r1, r7
 1a4:	4331      	orrs	r1, r6
 1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1a8:	7b9a      	ldrb	r2, [r3, #14]
 1aa:	43aa      	bics	r2, r5
 1ac:	4322      	orrs	r2, r4
 1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
 1b2:	6853      	ldr	r3, [r2, #4]
 1b4:	2180      	movs	r1, #128	; 0x80
 1b6:	430b      	orrs	r3, r1
 1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
 1bc:	4798      	blx	r3
        main();
 1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
 1c0:	4798      	blx	r3
 1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
 1c4:	000003fc 	.word	0x000003fc
 1c8:	20000000 	.word	0x20000000
 1cc:	20000434 	.word	0x20000434
 1d0:	20000004 	.word	0x20000004
 1d4:	20000434 	.word	0x20000434
 1d8:	20000474 	.word	0x20000474
 1dc:	e000ed00 	.word	0xe000ed00
 1e0:	00000000 	.word	0x00000000
 1e4:	41007000 	.word	0x41007000
 1e8:	41005000 	.word	0x41005000
 1ec:	41004800 	.word	0x41004800
 1f0:	41004000 	.word	0x41004000
 1f4:	00000235 	.word	0x00000235
 1f8:	0000020d 	.word	0x0000020d

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
 1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
 200:	601a      	str	r2, [r3, #0]
        return;
}
 202:	4770      	bx	lr
 204:	000f4240 	.word	0x000f4240
 208:	20000000 	.word	0x20000000

0000020c <main>:
 */ 

#include "sam.h"

int main(void)
{
 20c:	b510      	push	{r4, lr}
  /* Initialize the SAM system */
  SystemInit();
 20e:	4b05      	ldr	r3, [pc, #20]	; (224 <main+0x18>)
 210:	4798      	blx	r3

  REG_PORT_DIRSET1 = PORT_PB30;  //Set the direction of PB30 to output. (1 = Port B, PORT_PB30 = 1 << 30)
 212:	2380      	movs	r3, #128	; 0x80
 214:	05db      	lsls	r3, r3, #23
 216:	4a04      	ldr	r2, [pc, #16]	; (228 <main+0x1c>)
 218:	6013      	str	r3, [r2, #0]
  REG_PORT_OUTSET1 = PORT_PB30;  //Pull PB30 to VCC -> LED off
 21a:	4a04      	ldr	r2, [pc, #16]	; (22c <main+0x20>)
 21c:	6013      	str	r3, [r2, #0]
  REG_PORT_OUTCLR1 = PORT_PB30;  //Pull PB30 to ground -> LED on
 21e:	4a04      	ldr	r2, [pc, #16]	; (230 <main+0x24>)
 220:	6013      	str	r3, [r2, #0]
 222:	e7fe      	b.n	222 <main+0x16>
 224:	000001fd 	.word	0x000001fd
 228:	41004488 	.word	0x41004488
 22c:	41004498 	.word	0x41004498
 230:	41004494 	.word	0x41004494

00000234 <__libc_init_array>:
 234:	b570      	push	{r4, r5, r6, lr}
 236:	4e0d      	ldr	r6, [pc, #52]	; (26c <__libc_init_array+0x38>)
 238:	4d0d      	ldr	r5, [pc, #52]	; (270 <__libc_init_array+0x3c>)
 23a:	2400      	movs	r4, #0
 23c:	1bad      	subs	r5, r5, r6
 23e:	10ad      	asrs	r5, r5, #2
 240:	d005      	beq.n	24e <__libc_init_array+0x1a>
 242:	00a3      	lsls	r3, r4, #2
 244:	58f3      	ldr	r3, [r6, r3]
 246:	3401      	adds	r4, #1
 248:	4798      	blx	r3
 24a:	42a5      	cmp	r5, r4
 24c:	d1f9      	bne.n	242 <__libc_init_array+0xe>
 24e:	f000 f8c3 	bl	3d8 <_init>
 252:	4e08      	ldr	r6, [pc, #32]	; (274 <__libc_init_array+0x40>)
 254:	4d08      	ldr	r5, [pc, #32]	; (278 <__libc_init_array+0x44>)
 256:	2400      	movs	r4, #0
 258:	1bad      	subs	r5, r5, r6
 25a:	10ad      	asrs	r5, r5, #2
 25c:	d005      	beq.n	26a <__libc_init_array+0x36>
 25e:	00a3      	lsls	r3, r4, #2
 260:	58f3      	ldr	r3, [r6, r3]
 262:	3401      	adds	r4, #1
 264:	4798      	blx	r3
 266:	42a5      	cmp	r5, r4
 268:	d1f9      	bne.n	25e <__libc_init_array+0x2a>
 26a:	bd70      	pop	{r4, r5, r6, pc}
 26c:	000003e4 	.word	0x000003e4
 270:	000003e4 	.word	0x000003e4
 274:	000003e4 	.word	0x000003e4
 278:	000003ec 	.word	0x000003ec

0000027c <register_fini>:
 27c:	4b03      	ldr	r3, [pc, #12]	; (28c <register_fini+0x10>)
 27e:	b510      	push	{r4, lr}
 280:	2b00      	cmp	r3, #0
 282:	d002      	beq.n	28a <register_fini+0xe>
 284:	4802      	ldr	r0, [pc, #8]	; (290 <register_fini+0x14>)
 286:	f000 f805 	bl	294 <atexit>
 28a:	bd10      	pop	{r4, pc}
 28c:	00000000 	.word	0x00000000
 290:	000002a5 	.word	0x000002a5

00000294 <atexit>:
 294:	b510      	push	{r4, lr}
 296:	0001      	movs	r1, r0
 298:	2300      	movs	r3, #0
 29a:	2200      	movs	r2, #0
 29c:	2000      	movs	r0, #0
 29e:	f000 f81f 	bl	2e0 <__register_exitproc>
 2a2:	bd10      	pop	{r4, pc}

000002a4 <__libc_fini_array>:
 2a4:	b570      	push	{r4, r5, r6, lr}
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <__libc_fini_array+0x28>)
 2a8:	4c09      	ldr	r4, [pc, #36]	; (2d0 <__libc_fini_array+0x2c>)
 2aa:	1ae4      	subs	r4, r4, r3
 2ac:	10a4      	asrs	r4, r4, #2
 2ae:	d009      	beq.n	2c4 <__libc_fini_array+0x20>
 2b0:	4a08      	ldr	r2, [pc, #32]	; (2d4 <__libc_fini_array+0x30>)
 2b2:	18a5      	adds	r5, r4, r2
 2b4:	00ad      	lsls	r5, r5, #2
 2b6:	18ed      	adds	r5, r5, r3
 2b8:	682b      	ldr	r3, [r5, #0]
 2ba:	3c01      	subs	r4, #1
 2bc:	4798      	blx	r3
 2be:	3d04      	subs	r5, #4
 2c0:	2c00      	cmp	r4, #0
 2c2:	d1f9      	bne.n	2b8 <__libc_fini_array+0x14>
 2c4:	f000 f892 	bl	3ec <_fini>
 2c8:	bd70      	pop	{r4, r5, r6, pc}
 2ca:	46c0      	nop			; (mov r8, r8)
 2cc:	000003f8 	.word	0x000003f8
 2d0:	000003fc 	.word	0x000003fc
 2d4:	3fffffff 	.word	0x3fffffff

000002d8 <__retarget_lock_acquire_recursive>:
 2d8:	4770      	bx	lr
 2da:	46c0      	nop			; (mov r8, r8)

000002dc <__retarget_lock_release_recursive>:
 2dc:	4770      	bx	lr
 2de:	46c0      	nop			; (mov r8, r8)

000002e0 <__register_exitproc>:
 2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 2e2:	464e      	mov	r6, r9
 2e4:	4645      	mov	r5, r8
 2e6:	46de      	mov	lr, fp
 2e8:	4657      	mov	r7, sl
 2ea:	b5e0      	push	{r5, r6, r7, lr}
 2ec:	4d36      	ldr	r5, [pc, #216]	; (3c8 <__register_exitproc+0xe8>)
 2ee:	b083      	sub	sp, #12
 2f0:	0006      	movs	r6, r0
 2f2:	6828      	ldr	r0, [r5, #0]
 2f4:	4698      	mov	r8, r3
 2f6:	000f      	movs	r7, r1
 2f8:	4691      	mov	r9, r2
 2fa:	f7ff ffed 	bl	2d8 <__retarget_lock_acquire_recursive>
 2fe:	4b33      	ldr	r3, [pc, #204]	; (3cc <__register_exitproc+0xec>)
 300:	681c      	ldr	r4, [r3, #0]
 302:	23a4      	movs	r3, #164	; 0xa4
 304:	005b      	lsls	r3, r3, #1
 306:	58e0      	ldr	r0, [r4, r3]
 308:	2800      	cmp	r0, #0
 30a:	d052      	beq.n	3b2 <__register_exitproc+0xd2>
 30c:	6843      	ldr	r3, [r0, #4]
 30e:	2b1f      	cmp	r3, #31
 310:	dc13      	bgt.n	33a <__register_exitproc+0x5a>
 312:	1c5a      	adds	r2, r3, #1
 314:	9201      	str	r2, [sp, #4]
 316:	2e00      	cmp	r6, #0
 318:	d128      	bne.n	36c <__register_exitproc+0x8c>
 31a:	9a01      	ldr	r2, [sp, #4]
 31c:	3302      	adds	r3, #2
 31e:	009b      	lsls	r3, r3, #2
 320:	6042      	str	r2, [r0, #4]
 322:	501f      	str	r7, [r3, r0]
 324:	6828      	ldr	r0, [r5, #0]
 326:	f7ff ffd9 	bl	2dc <__retarget_lock_release_recursive>
 32a:	2000      	movs	r0, #0
 32c:	b003      	add	sp, #12
 32e:	bc3c      	pop	{r2, r3, r4, r5}
 330:	4690      	mov	r8, r2
 332:	4699      	mov	r9, r3
 334:	46a2      	mov	sl, r4
 336:	46ab      	mov	fp, r5
 338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 33a:	4b25      	ldr	r3, [pc, #148]	; (3d0 <__register_exitproc+0xf0>)
 33c:	2b00      	cmp	r3, #0
 33e:	d03d      	beq.n	3bc <__register_exitproc+0xdc>
 340:	20c8      	movs	r0, #200	; 0xc8
 342:	0040      	lsls	r0, r0, #1
 344:	e000      	b.n	348 <__register_exitproc+0x68>
 346:	bf00      	nop
 348:	2800      	cmp	r0, #0
 34a:	d037      	beq.n	3bc <__register_exitproc+0xdc>
 34c:	22a4      	movs	r2, #164	; 0xa4
 34e:	2300      	movs	r3, #0
 350:	0052      	lsls	r2, r2, #1
 352:	58a1      	ldr	r1, [r4, r2]
 354:	6043      	str	r3, [r0, #4]
 356:	6001      	str	r1, [r0, #0]
 358:	50a0      	str	r0, [r4, r2]
 35a:	3240      	adds	r2, #64	; 0x40
 35c:	5083      	str	r3, [r0, r2]
 35e:	3204      	adds	r2, #4
 360:	5083      	str	r3, [r0, r2]
 362:	3301      	adds	r3, #1
 364:	9301      	str	r3, [sp, #4]
 366:	2300      	movs	r3, #0
 368:	2e00      	cmp	r6, #0
 36a:	d0d6      	beq.n	31a <__register_exitproc+0x3a>
 36c:	009a      	lsls	r2, r3, #2
 36e:	4692      	mov	sl, r2
 370:	4482      	add	sl, r0
 372:	464a      	mov	r2, r9
 374:	2188      	movs	r1, #136	; 0x88
 376:	4654      	mov	r4, sl
 378:	5062      	str	r2, [r4, r1]
 37a:	22c4      	movs	r2, #196	; 0xc4
 37c:	0052      	lsls	r2, r2, #1
 37e:	4691      	mov	r9, r2
 380:	4481      	add	r9, r0
 382:	464a      	mov	r2, r9
 384:	3987      	subs	r1, #135	; 0x87
 386:	4099      	lsls	r1, r3
 388:	6812      	ldr	r2, [r2, #0]
 38a:	468b      	mov	fp, r1
 38c:	430a      	orrs	r2, r1
 38e:	4694      	mov	ip, r2
 390:	464a      	mov	r2, r9
 392:	4661      	mov	r1, ip
 394:	6011      	str	r1, [r2, #0]
 396:	2284      	movs	r2, #132	; 0x84
 398:	4641      	mov	r1, r8
 39a:	0052      	lsls	r2, r2, #1
 39c:	50a1      	str	r1, [r4, r2]
 39e:	2e02      	cmp	r6, #2
 3a0:	d1bb      	bne.n	31a <__register_exitproc+0x3a>
 3a2:	0002      	movs	r2, r0
 3a4:	465c      	mov	r4, fp
 3a6:	328d      	adds	r2, #141	; 0x8d
 3a8:	32ff      	adds	r2, #255	; 0xff
 3aa:	6811      	ldr	r1, [r2, #0]
 3ac:	430c      	orrs	r4, r1
 3ae:	6014      	str	r4, [r2, #0]
 3b0:	e7b3      	b.n	31a <__register_exitproc+0x3a>
 3b2:	0020      	movs	r0, r4
 3b4:	304d      	adds	r0, #77	; 0x4d
 3b6:	30ff      	adds	r0, #255	; 0xff
 3b8:	50e0      	str	r0, [r4, r3]
 3ba:	e7a7      	b.n	30c <__register_exitproc+0x2c>
 3bc:	6828      	ldr	r0, [r5, #0]
 3be:	f7ff ff8d 	bl	2dc <__retarget_lock_release_recursive>
 3c2:	2001      	movs	r0, #1
 3c4:	4240      	negs	r0, r0
 3c6:	e7b1      	b.n	32c <__register_exitproc+0x4c>
 3c8:	20000430 	.word	0x20000430
 3cc:	000003d4 	.word	0x000003d4
 3d0:	00000000 	.word	0x00000000

000003d4 <_global_impure_ptr>:
 3d4:	20000008                                ... 

000003d8 <_init>:
 3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3da:	46c0      	nop			; (mov r8, r8)
 3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3de:	bc08      	pop	{r3}
 3e0:	469e      	mov	lr, r3
 3e2:	4770      	bx	lr

000003e4 <__init_array_start>:
 3e4:	0000027d 	.word	0x0000027d

000003e8 <__frame_dummy_init_array_entry>:
 3e8:	000000dd                                ....

000003ec <_fini>:
 3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 3ee:	46c0      	nop			; (mov r8, r8)
 3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 3f2:	bc08      	pop	{r3}
 3f4:	469e      	mov	lr, r3
 3f6:	4770      	bx	lr

000003f8 <__fini_array_start>:
 3f8:	000000b5 	.word	0x000000b5
